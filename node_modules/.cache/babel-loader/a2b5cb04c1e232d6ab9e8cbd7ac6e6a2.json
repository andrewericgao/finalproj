{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\";\nimport React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nfunction getWordFrequency(text) {\n  const words = text.toLowerCase().match(/\\w+/g);\n  if (!words) {\n    return [];\n  }\n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(wordCount).map(word => {\n    return {\n      text: word,\n      value: wordCount[word]\n    };\n  });\n}\nfunction App() {\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const [wordCloudData, setWordCloudData] = useState([]);\n  const [rawText, setRawText] = useState(''); // State to store the raw text input\n\n  const handleAnalysisComplete = results => {\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData);\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      const sentimentData = JSON.parse(result);\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n    setWordCloudData(getWordFrequency(rawText));\n  };\n  const handleTextChange = text => {\n    setRawText(text);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Text Sentiment Analysis Dashboard\"), /*#__PURE__*/React.createElement(Banner, {\n    averageSentiment: averagePositiveSentiment,\n    totalComments: totalComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextInputForm, {\n    onAnalysisComplete: handleAnalysisComplete,\n    onTextChange: handleTextChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SentimentPieChart, {\n    sentimentData: sentimentData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(WordCloud, {\n    words: wordCloudData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(TopWords, {\n    wordData: wordCloudData.slice(0, 10),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), \" \"));\n}\nexport default App;","map":{"version":3,"names":["React","useState","TextInputForm","Banner","SentimentPieChart","WordCloud","TopWords","getWordFrequency","text","words","toLowerCase","match","wordCount","reduce","acc","word","Object","keys","map","value","App","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","rawText","setRawText","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","sentimentScore","a","b","chartData","validResults","filter","length","totalPositiveScore","handleTextChange","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","onAnalysisComplete","onTextChange","wordData","slice"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\n\nfunction getWordFrequency(text) {\n    const words = text\n        .toLowerCase()\n        .match(/\\w+/g);\n\n    if (!words) {\n        return [];\n    }\n\n    const wordCount = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n    }, {});\n\n    return Object.keys(wordCount).map(word => {\n        return { text: word, value: wordCount[word] };\n    });\n}\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n    const [rawText, setRawText] = useState(''); // State to store the raw text input\n\n    const handleAnalysisComplete = (results) => {\n        let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n\n        results.forEach(result => {\n            if (result) {\n                const sentimentData = JSON.parse(result);\n                const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n                sentimentCounts[highestSentiment]++;\n            }\n        });\n\n        const chartData = [\n            sentimentCounts.Positive, \n            sentimentCounts.Negative, \n            sentimentCounts.Neutral,\n            sentimentCounts.Mixed\n        ];\n        setSentimentData(chartData);\n\n        const validResults = results.filter(result => result != null);\n        setTotalComments(validResults.length);\n  \n        const totalPositiveScore = validResults.reduce((acc, result) => {\n            const sentimentData = JSON.parse(result);\n            return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n        }, 0);\n\n        setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n        \n        setWordCloudData(getWordFrequency(rawText));\n    };\n\n    const handleTextChange = (text) => {\n        setRawText(text);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Text Sentiment Analysis Dashboard</h1>\n            <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n            <TextInputForm onAnalysisComplete={handleAnalysisComplete} onTextChange={handleTextChange} />\n            <div className=\"dashboard-content\">\n                <SentimentPieChart sentimentData={sentimentData} />\n                <WordCloud words={wordCloudData} />\n                <TopWords wordData={wordCloudData.slice(0, 10)} /> {/* Show top 10 words */}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}