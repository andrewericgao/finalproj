{"ast":null,"code":"import React,{useState}from'react';import WelcomeMessage from'./components/WelcomeMessage';import TextInputForm from'./components/TextInputForm';import Banner from'./components/Banner';import SentimentPieChart from'./components/SentimentPieChart';import WordCloud from'./components/WordCloud';import TopWords from'./components/TopWords';import CommentsTable from'./components/CommentsTable';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function getWordFrequency(text){const words=text.toLowerCase().match(/\\w+/g);if(!words)return[];const wordCount=words.reduce((acc,word)=>{acc[word]=(acc[word]||0)+1;return acc;},{});return Object.keys(wordCount).map(word=>({text:word,value:wordCount[word]}));}function App(){const[averagePositiveSentiment,setAveragePositiveSentiment]=useState(0);const[totalComments,setTotalComments]=useState(0);const[sentimentData,setSentimentData]=useState([0,0,0,0]);const[wordCloudData,setWordCloudData]=useState([]);const[rawText,setRawText]=useState('');const[commentsData,setCommentsData]=useState([]);const[hasSubmitted,setHasSubmitted]=useState(false);const handleAnalysisComplete=results=>{let sentimentCounts={Positive:0,Negative:0,Neutral:0,Mixed:0};results.forEach(result=>{if(result){const sentimentData=JSON.parse(result);const highestSentiment=Object.keys(sentimentData.sentimentScore).reduce((a,b)=>sentimentData.sentimentScore[a]>sentimentData.sentimentScore[b]?a:b);sentimentCounts[highestSentiment]++;}});const chartData=[sentimentCounts.Positive,sentimentCounts.Negative,sentimentCounts.Neutral,sentimentCounts.Mixed];setSentimentData(chartData);const validResults=results.filter(result=>result!=null);setTotalComments(validResults.length);const totalPositiveScore=validResults.reduce((acc,result)=>{const sentimentData=JSON.parse(result);return acc+(sentimentData.sentimentScore?sentimentData.sentimentScore.Positive:0);},0);setAveragePositiveSentiment(validResults.length>0?totalPositiveScore/validResults.length:0);setWordCloudData(getWordFrequency(rawText));const comments=rawText.split('\\n').filter(comment=>comment.trim()!=='');const extractedCommentsData=comments.map((comment,index)=>({text:comment,sentiment:results[index]?JSON.parse(results[index]).sentiment:'N/A'}));setCommentsData(extractedCommentsData);setHasSubmitted(true);};const handleTextChange=text=>{setRawText(text);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"content-area\",children:[!hasSubmitted&&/*#__PURE__*/_jsx(WelcomeMessage,{}),hasSubmitted&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Banner,{averageSentiment:averagePositiveSentiment,totalComments:totalComments}),/*#__PURE__*/_jsxs(\"div\",{className:\"charts-container\",children:[/*#__PURE__*/_jsx(SentimentPieChart,{sentimentData:sentimentData}),/*#__PURE__*/_jsx(WordCloud,{words:wordCloudData})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"analysis-container\",children:[/*#__PURE__*/_jsx(TopWords,{wordData:wordCloudData.slice(0,10)}),/*#__PURE__*/_jsx(CommentsTable,{commentsData:commentsData})]})]})]}),/*#__PURE__*/_jsx(TextInputForm,{onAnalysisComplete:handleAnalysisComplete,onTextChange:handleTextChange})]});}export default App;","map":{"version":3,"names":["React","useState","WelcomeMessage","TextInputForm","Banner","SentimentPieChart","WordCloud","TopWords","CommentsTable","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","getWordFrequency","text","words","toLowerCase","match","wordCount","reduce","acc","word","Object","keys","map","value","App","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","rawText","setRawText","commentsData","setCommentsData","hasSubmitted","setHasSubmitted","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","sentimentScore","a","b","chartData","validResults","filter","length","totalPositiveScore","comments","split","comment","trim","extractedCommentsData","index","sentiment","handleTextChange","className","children","averageSentiment","wordData","slice","onAnalysisComplete","onTextChange"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\n\nfunction getWordFrequency(text) {\n    const words = text.toLowerCase().match(/\\w+/g);\n    if (!words) return [];\n    const wordCount = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n    }, {});\n    return Object.keys(wordCount).map(word => ({ text: word, value: wordCount[word] }));\n}\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n    const [rawText, setRawText] = useState('');\n    const [commentsData, setCommentsData] = useState([]);\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n\n    const handleAnalysisComplete = (results) => {\n        let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n        results.forEach(result => {\n            if (result) {\n                const sentimentData = JSON.parse(result);\n                const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n                sentimentCounts[highestSentiment]++;\n            }\n        });\n\n        const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n        setSentimentData(chartData);\n\n        const validResults = results.filter(result => result != null);\n        setTotalComments(validResults.length);\n\n        const totalPositiveScore = validResults.reduce((acc, result) => {\n            const sentimentData = JSON.parse(result);\n            return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n        }, 0);\n\n        setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n        setWordCloudData(getWordFrequency(rawText));\n\n        const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n        const extractedCommentsData = comments.map((comment, index) => ({\n            text: comment,\n            sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n        }));\n        setCommentsData(extractedCommentsData);\n        setHasSubmitted(true);\n    };\n\n    const handleTextChange = (text) => {\n        setRawText(text);\n    };\n\n    return (\n      <div className=\"App\">\n          <div className=\"content-area\">\n              {!hasSubmitted && <WelcomeMessage />}\n              {hasSubmitted && (\n                  <>\n                      <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n                      <div className=\"charts-container\">\n                          <SentimentPieChart sentimentData={sentimentData} />\n                          <WordCloud words={wordCloudData} />\n                      </div>\n                      <div className=\"analysis-container\">\n                          <TopWords wordData={wordCloudData.slice(0, 10)} />\n                          <CommentsTable commentsData={commentsData} />\n                      </div>\n                  </>\n              )}\n          </div>\n          <TextInputForm onAnalysisComplete={handleAnalysisComplete} onTextChange={handleTextChange} />\n      </div>\n  );\n  \n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,cAAc,KAAM,6BAA6B,CACxD,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,iBAAiB,KAAM,gCAAgC,CAC9D,MAAO,CAAAC,SAAS,KAAM,wBAAwB,CAC9C,MAAO,CAAAC,QAAQ,KAAM,uBAAuB,CAC5C,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAEvD,QAAS,CAAAC,gBAAgBA,CAACC,IAAI,CAAE,CAC5B,KAAM,CAAAC,KAAK,CAAGD,IAAI,CAACE,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC,CAC9C,GAAI,CAACF,KAAK,CAAE,MAAO,EAAE,CACrB,KAAM,CAAAG,SAAS,CAAGH,KAAK,CAACI,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAK,CAC1CD,GAAG,CAACC,IAAI,CAAC,CAAG,CAACD,GAAG,CAACC,IAAI,CAAC,EAAI,CAAC,EAAI,CAAC,CAChC,MAAO,CAAAD,GAAG,CACd,CAAC,CAAE,CAAC,CAAC,CAAC,CACN,MAAO,CAAAE,MAAM,CAACC,IAAI,CAACL,SAAS,CAAC,CAACM,GAAG,CAACH,IAAI,GAAK,CAAEP,IAAI,CAAEO,IAAI,CAAEI,KAAK,CAAEP,SAAS,CAACG,IAAI,CAAE,CAAC,CAAC,CAAC,CACvF,CAEA,QAAS,CAAAK,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,wBAAwB,CAAEC,2BAA2B,CAAC,CAAG7B,QAAQ,CAAC,CAAC,CAAC,CAC3E,KAAM,CAAC8B,aAAa,CAAEC,gBAAgB,CAAC,CAAG/B,QAAQ,CAAC,CAAC,CAAC,CACrD,KAAM,CAACgC,aAAa,CAAEC,gBAAgB,CAAC,CAAGjC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,CAChE,KAAM,CAACkC,aAAa,CAAEC,gBAAgB,CAAC,CAAGnC,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACoC,OAAO,CAAEC,UAAU,CAAC,CAAGrC,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACsC,YAAY,CAAEC,eAAe,CAAC,CAAGvC,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACwC,YAAY,CAAEC,eAAe,CAAC,CAAGzC,QAAQ,CAAC,KAAK,CAAC,CAEvD,KAAM,CAAA0C,sBAAsB,CAAIC,OAAO,EAAK,CACxC,GAAI,CAAAC,eAAe,CAAG,CAAEC,QAAQ,CAAE,CAAC,CAAEC,QAAQ,CAAE,CAAC,CAAEC,OAAO,CAAE,CAAC,CAAEC,KAAK,CAAE,CAAE,CAAC,CACxEL,OAAO,CAACM,OAAO,CAACC,MAAM,EAAI,CACtB,GAAIA,MAAM,CAAE,CACR,KAAM,CAAAlB,aAAa,CAAGmB,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CACxC,KAAM,CAAAG,gBAAgB,CAAG9B,MAAM,CAACC,IAAI,CAACQ,aAAa,CAACsB,cAAc,CAAC,CAAClC,MAAM,CAAC,CAACmC,CAAC,CAAEC,CAAC,GAAKxB,aAAa,CAACsB,cAAc,CAACC,CAAC,CAAC,CAAGvB,aAAa,CAACsB,cAAc,CAACE,CAAC,CAAC,CAAGD,CAAC,CAAGC,CAAC,CAAC,CAC9JZ,eAAe,CAACS,gBAAgB,CAAC,EAAE,CACvC,CACJ,CAAC,CAAC,CAEF,KAAM,CAAAI,SAAS,CAAG,CAACb,eAAe,CAACC,QAAQ,CAAED,eAAe,CAACE,QAAQ,CAAEF,eAAe,CAACG,OAAO,CAAEH,eAAe,CAACI,KAAK,CAAC,CACtHf,gBAAgB,CAACwB,SAAS,CAAC,CAE3B,KAAM,CAAAC,YAAY,CAAGf,OAAO,CAACgB,MAAM,CAACT,MAAM,EAAIA,MAAM,EAAI,IAAI,CAAC,CAC7DnB,gBAAgB,CAAC2B,YAAY,CAACE,MAAM,CAAC,CAErC,KAAM,CAAAC,kBAAkB,CAAGH,YAAY,CAACtC,MAAM,CAAC,CAACC,GAAG,CAAE6B,MAAM,GAAK,CAC5D,KAAM,CAAAlB,aAAa,CAAGmB,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC,CACxC,MAAO,CAAA7B,GAAG,EAAIW,aAAa,CAACsB,cAAc,CAAGtB,aAAa,CAACsB,cAAc,CAACT,QAAQ,CAAG,CAAC,CAAC,CAC3F,CAAC,CAAE,CAAC,CAAC,CAELhB,2BAA2B,CAAC6B,YAAY,CAACE,MAAM,CAAG,CAAC,CAAGC,kBAAkB,CAAGH,YAAY,CAACE,MAAM,CAAG,CAAC,CAAC,CACnGzB,gBAAgB,CAACrB,gBAAgB,CAACsB,OAAO,CAAC,CAAC,CAE3C,KAAM,CAAA0B,QAAQ,CAAG1B,OAAO,CAAC2B,KAAK,CAAC,IAAI,CAAC,CAACJ,MAAM,CAACK,OAAO,EAAIA,OAAO,CAACC,IAAI,CAAC,CAAC,GAAK,EAAE,CAAC,CAC7E,KAAM,CAAAC,qBAAqB,CAAGJ,QAAQ,CAACrC,GAAG,CAAC,CAACuC,OAAO,CAAEG,KAAK,IAAM,CAC5DpD,IAAI,CAAEiD,OAAO,CACbI,SAAS,CAAEzB,OAAO,CAACwB,KAAK,CAAC,CAAGhB,IAAI,CAACC,KAAK,CAACT,OAAO,CAACwB,KAAK,CAAC,CAAC,CAACC,SAAS,CAAG,KACvE,CAAC,CAAC,CAAC,CACH7B,eAAe,CAAC2B,qBAAqB,CAAC,CACtCzB,eAAe,CAAC,IAAI,CAAC,CACzB,CAAC,CAED,KAAM,CAAA4B,gBAAgB,CAAItD,IAAI,EAAK,CAC/BsB,UAAU,CAACtB,IAAI,CAAC,CACpB,CAAC,CAED,mBACEJ,KAAA,QAAK2D,SAAS,CAAC,KAAK,CAAAC,QAAA,eAChB5D,KAAA,QAAK2D,SAAS,CAAC,cAAc,CAAAC,QAAA,EACxB,CAAC/B,YAAY,eAAI/B,IAAA,CAACR,cAAc,GAAE,CAAC,CACnCuC,YAAY,eACT7B,KAAA,CAAAE,SAAA,EAAA0D,QAAA,eACI9D,IAAA,CAACN,MAAM,EAACqE,gBAAgB,CAAE5C,wBAAyB,CAACE,aAAa,CAAEA,aAAc,CAAE,CAAC,cACpFnB,KAAA,QAAK2D,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7B9D,IAAA,CAACL,iBAAiB,EAAC4B,aAAa,CAAEA,aAAc,CAAE,CAAC,cACnDvB,IAAA,CAACJ,SAAS,EAACW,KAAK,CAAEkB,aAAc,CAAE,CAAC,EAClC,CAAC,cACNvB,KAAA,QAAK2D,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eAC/B9D,IAAA,CAACH,QAAQ,EAACmE,QAAQ,CAAEvC,aAAa,CAACwC,KAAK,CAAC,CAAC,CAAE,EAAE,CAAE,CAAE,CAAC,cAClDjE,IAAA,CAACF,aAAa,EAAC+B,YAAY,CAAEA,YAAa,CAAE,CAAC,EAC5C,CAAC,EACR,CACL,EACA,CAAC,cACN7B,IAAA,CAACP,aAAa,EAACyE,kBAAkB,CAAEjC,sBAAuB,CAACkC,YAAY,CAAEP,gBAAiB,CAAE,CAAC,EAC5F,CAAC,CAGZ,CAEA,cAAe,CAAA1C,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}