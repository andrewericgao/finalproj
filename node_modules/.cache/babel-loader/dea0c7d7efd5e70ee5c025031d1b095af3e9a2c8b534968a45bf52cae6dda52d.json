{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction getWordFrequency(text) {\n  const words = text.toLowerCase().match(/\\w+/g);\n  if (!words) return [];\n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(wordCount).map(word => ({\n    text: word,\n    value: wordCount[word]\n  }));\n}\nfunction App() {\n  _s();\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const [wordCloudData, setWordCloudData] = useState([]);\n  const [rawText, setRawText] = useState('');\n  const [commentsData, setCommentsData] = useState([]);\n  const handleAnalysisComplete = results => {\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData);\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      const sentimentData = JSON.parse(result);\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n    setWordCloudData(getWordFrequency(rawText));\n    const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n    const extractedCommentsData = comments.map((comment, index) => ({\n      text: comment,\n      sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n    }));\n    setCommentsData(extractedCommentsData);\n  };\n  const handleTextChange = text => {\n    setRawText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [!hasSubmitted && /*#__PURE__*/_jsxDEV(WelcomeMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: hasSubmitted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Banner, {\n          averageSentiment: averagePositiveSentiment,\n          totalComments: totalComments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SentimentPieChart, {\n          sentimentData: sentimentData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(WordCloud, {\n          words: wordCloudData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TopWords, {\n          wordData: wordCloudData.slice(0, 10)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CommentsTable, {\n          commentsData: commentsData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextInputForm, {\n      onAnalysisComplete: handleAnalysisComplete,\n      onTextChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"zrQEL5zq8LfUPlSE5x9d/MEIL/g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WelcomeMessage","TextInputForm","Banner","SentimentPieChart","WordCloud","TopWords","CommentsTable","jsxDEV","_jsxDEV","Fragment","_Fragment","getWordFrequency","text","words","toLowerCase","match","wordCount","reduce","acc","word","Object","keys","map","value","App","_s","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","rawText","setRawText","commentsData","setCommentsData","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","sentimentScore","a","b","chartData","validResults","filter","length","totalPositiveScore","comments","split","comment","trim","extractedCommentsData","index","sentiment","handleTextChange","className","children","hasSubmitted","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","wordData","slice","onAnalysisComplete","onTextChange","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\n\nfunction getWordFrequency(text) {\n    const words = text.toLowerCase().match(/\\w+/g);\n    if (!words) return [];\n    const wordCount = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n    }, {});\n    return Object.keys(wordCount).map(word => ({ text: word, value: wordCount[word] }));\n}\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n    const [rawText, setRawText] = useState('');\n    const [commentsData, setCommentsData] = useState([]);\n\n    const handleAnalysisComplete = (results) => {\n        let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n        results.forEach(result => {\n            if (result) {\n                const sentimentData = JSON.parse(result);\n                const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n                sentimentCounts[highestSentiment]++;\n            }\n        });\n\n        const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n        setSentimentData(chartData);\n\n        const validResults = results.filter(result => result != null);\n        setTotalComments(validResults.length);\n\n        const totalPositiveScore = validResults.reduce((acc, result) => {\n            const sentimentData = JSON.parse(result);\n            return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n        }, 0);\n\n        setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n        setWordCloudData(getWordFrequency(rawText));\n\n        const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n        const extractedCommentsData = comments.map((comment, index) => ({\n            text: comment,\n            sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n        }));\n        setCommentsData(extractedCommentsData);\n    };\n\n    const handleTextChange = (text) => {\n        setRawText(text);\n    };\n\n    return (\n        <div className=\"App\">\n        {!hasSubmitted && <WelcomeMessage />}\n        <div className=\"dashboard-content\">\n            {hasSubmitted && (\n                <>\n                    <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n                    <SentimentPieChart sentimentData={sentimentData} />\n                    <WordCloud words={wordCloudData} />\n                    <TopWords wordData={wordCloudData.slice(0, 10)} />\n                    <CommentsTable commentsData={commentsData} />\n                </>\n            )}\n        </div>\n        <TextInputForm onAnalysisComplete={handleAnalysisComplete} onTextChange={handleTextChange} />\n    </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}