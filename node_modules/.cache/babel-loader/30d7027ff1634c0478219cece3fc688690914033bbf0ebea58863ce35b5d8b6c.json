{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/components/TextInputForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TextInputForm.css';\nimport { ReactComponent as UpArrowIcon } from './up-arrow-icon.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextInputForm = ({\n  onAnalysisComplete,\n  onTextChange\n}) => {\n  _s();\n  const [text, setText] = useState('');\n  const [isTextEntered, setIsTextEntered] = useState(false);\n  const predefinedComments = {\n    set1: \"Absolutely love this product, it's amazing!\\nUnfortunately, it didn't meet my expectations.\\nThe product is okay, nothing special.\\nSome features are great, others not so much.\\nEnjoyed the overall experience, but some aspects could be better.\\nReliable and effective, gets the job done.\\nNot as good as advertised, quite disappointed.\\nMet my expectations, but nothing more.\\nGood value for money, but has some minor issues.\\nFantastic service, always goes above and beyond!\",\n    set2: \"This service is outstanding, exceeded my expectations!\\nNot very satisfied with the customer service.\\nAverage experience, nothing too impressive.\\nInteresting concept but the execution is lacking.\\nQuite pleased with the outcome, though it has minor flaws.\\nExemplary performance, truly a top-notch product.\\nFalls short in terms of durability and reliability.\\nAdequate for my needs, but not exceptional.\\nHas great potential but needs more development.\\nIncredible results, couldn’t be happier!\",\n    set3: \"I'm really impressed with the quality!\\nThe product broke after a week, not happy.\\nIt's an average product, works as expected.\\nLove part of the service, but some parts are frustrating.\\nSatisfactory performance, though it has room for improvement.\\nExceeds expectations in every way, highly recommended!\\nDisappointing experience, will not be repurchasing.\\nAverage quality, nothing to write home about.\\nA mixed bag, some aspects good, others not.\\nThrilled with the purchase, it’s been fantastic!\",\n    set4: \"Excellent performance, very reliable!\\nThe user experience could be a lot better.\\nFor the price, it's a decent choice.\\nHas its ups and downs, not consistent.\\nImpressive in some areas but falls short in others.\\nAbsolutely phenomenal, exceeded all my expectations!\\nRegrettably, it did not live up to the hype.\\nMediocre, I expected more based on the reviews.\\nShows promise, but it's a bit of a mixed experience.\\nSuperb in every aspect, a must-have!\"\n  };\n  const handleTextChange = e => {\n    const newText = e.target.value;\n    setText(newText);\n    onTextChange(newText);\n    setIsTextEntered(newText.trim() !== '');\n  };\n  const handlePredefinedCommentClick = comment => {\n    setText(comment);\n    setIsTextEntered(true);\n    onTextChange(comment);\n  };\n  const callAPI = async inputText => {\n    try {\n      const myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      const raw = JSON.stringify({\n        \"text\": inputText\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n      };\n      const response = await fetch(\"https://eip9ikhrl0.execute-api.us-east-2.amazonaws.com/dev\", requestOptions);\n      const result = await response.json();\n      return result.body;\n    } catch (error) {\n      console.error('error', error);\n      return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!isTextEntered) {\n      return;\n    }\n    const comments = text.split('\\n').filter(comment => comment.trim() !== '');\n    const results = await Promise.all(comments.map(comment => callAPI(comment)));\n    onAnalysisComplete(results);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-input-form\",\n    children: [!isTextEntered && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predefined-comments-container\",\n      children: Object.entries(predefinedComments).map(([set, comments], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-comment-set\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"predefined-comments-box\",\n          children: comments.split('\\n').map((comment, commentIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"predefined-comment-button\",\n            onClick: () => handlePredefinedCommentClick(comment),\n            children: comment\n          }, commentIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)\n      }, set, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"text-input\",\n        value: text,\n        onChange: handleTextChange,\n        placeholder: \"Enter your texts (one comment per line)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button ${isTextEntered ? '' : 'inactive'}`,\n        children: /*#__PURE__*/_jsxDEV(UpArrowIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(TextInputForm, \"VNj6Z7JLurCVCQFKrG4Ix2PkxTA=\");\n_c = TextInputForm;\nexport default TextInputForm;\nvar _c;\n$RefreshReg$(_c, \"TextInputForm\");","map":{"version":3,"names":["React","useState","ReactComponent","UpArrowIcon","jsxDEV","_jsxDEV","TextInputForm","onAnalysisComplete","onTextChange","_s","text","setText","isTextEntered","setIsTextEntered","predefinedComments","set1","set2","set3","set4","handleTextChange","e","newText","target","value","trim","handlePredefinedCommentClick","comment","callAPI","inputText","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","response","fetch","result","json","error","console","handleSubmit","event","preventDefault","comments","split","filter","results","Promise","all","map","className","children","Object","entries","set","index","commentIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/components/TextInputForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './TextInputForm.css';\nimport { ReactComponent as UpArrowIcon } from './up-arrow-icon.svg';\n\nconst TextInputForm = ({ onAnalysisComplete, onTextChange }) => {\n    const [text, setText] = useState('');\n    const [isTextEntered, setIsTextEntered] = useState(false);\n\n    const predefinedComments = {\n        set1: \"Absolutely love this product, it's amazing!\\nUnfortunately, it didn't meet my expectations.\\nThe product is okay, nothing special.\\nSome features are great, others not so much.\\nEnjoyed the overall experience, but some aspects could be better.\\nReliable and effective, gets the job done.\\nNot as good as advertised, quite disappointed.\\nMet my expectations, but nothing more.\\nGood value for money, but has some minor issues.\\nFantastic service, always goes above and beyond!\",\n        set2: \"This service is outstanding, exceeded my expectations!\\nNot very satisfied with the customer service.\\nAverage experience, nothing too impressive.\\nInteresting concept but the execution is lacking.\\nQuite pleased with the outcome, though it has minor flaws.\\nExemplary performance, truly a top-notch product.\\nFalls short in terms of durability and reliability.\\nAdequate for my needs, but not exceptional.\\nHas great potential but needs more development.\\nIncredible results, couldn’t be happier!\",\n        set3: \"I'm really impressed with the quality!\\nThe product broke after a week, not happy.\\nIt's an average product, works as expected.\\nLove part of the service, but some parts are frustrating.\\nSatisfactory performance, though it has room for improvement.\\nExceeds expectations in every way, highly recommended!\\nDisappointing experience, will not be repurchasing.\\nAverage quality, nothing to write home about.\\nA mixed bag, some aspects good, others not.\\nThrilled with the purchase, it’s been fantastic!\",\n        set4: \"Excellent performance, very reliable!\\nThe user experience could be a lot better.\\nFor the price, it's a decent choice.\\nHas its ups and downs, not consistent.\\nImpressive in some areas but falls short in others.\\nAbsolutely phenomenal, exceeded all my expectations!\\nRegrettably, it did not live up to the hype.\\nMediocre, I expected more based on the reviews.\\nShows promise, but it's a bit of a mixed experience.\\nSuperb in every aspect, a must-have!\"\n    };\n\n    const handleTextChange = (e) => {\n        const newText = e.target.value;\n        setText(newText);\n        onTextChange(newText);\n        setIsTextEntered(newText.trim() !== '');\n    };\n\n    const handlePredefinedCommentClick = (comment) => {\n        setText(comment);\n        setIsTextEntered(true);\n        onTextChange(comment);\n    };\n\n    const callAPI = async (inputText) => {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            const raw = JSON.stringify({ \"text\": inputText });\n            const requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n            };\n\n            const response = await fetch(\"https://eip9ikhrl0.execute-api.us-east-2.amazonaws.com/dev\", requestOptions);\n            const result = await response.json();\n            return result.body;\n        } catch (error) {\n            console.error('error', error);\n            return null;\n        }\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (!isTextEntered) {\n            return;\n        }\n        const comments = text.split('\\n').filter(comment => comment.trim() !== '');\n        const results = await Promise.all(comments.map(comment => callAPI(comment)));\n        onAnalysisComplete(results);\n    };\n\n    return (\n        <div className=\"text-input-form\">\n        {!isTextEntered && (\n            <div className=\"predefined-comments-container\">\n                {Object.entries(predefinedComments).map(([set, comments], index) => (\n                    <div key={set} className=\"predefined-comment-set\">\n                        <div className=\"predefined-comments-box\">\n                            {comments.split('\\n').map((comment, commentIndex) => (\n                                <button\n                                    key={commentIndex}\n                                    className=\"predefined-comment-button\"\n                                    onClick={() => handlePredefinedCommentClick(comment)}\n                                >\n                                    {comment}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )}\n            <form onSubmit={handleSubmit}>\n                <textarea \n                    className=\"text-input\" \n                    value={text} \n                    onChange={handleTextChange}\n                    placeholder=\"Enter your texts (one comment per line)\"\n                />\n                <button type=\"submit\" className={`submit-button ${isTextEntered ? '' : 'inactive'}`}>\n                    <UpArrowIcon />\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default TextInputForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}