{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getWordFrequency(text) {\n  const words = text.toLowerCase().match(/\\w+/g);\n  if (!words) {\n    return [];\n  }\n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(wordCount).map(word => {\n    return {\n      text: word,\n      value: wordCount[word]\n    };\n  });\n}\nfunction App() {\n  _s();\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const [wordCloudData, setWordCloudData] = useState([]);\n  const [rawText, setRawText] = useState(''); // State to store the raw text input\n  const [commentsData, setCommentsData] = useState([]);\n  const handleAnalysisComplete = results => {\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData);\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      const sentimentData = JSON.parse(result);\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    const extractedCommentsData = results.map(result => ({\n      text: JSON.parse(result).text,\n      sentiment: JSON.parse(result).sentiment\n    }));\n    setCommentsData(extractedCommentsData);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n    setWordCloudData(getWordFrequency(rawText));\n  };\n  const handleTextChange = text => {\n    setRawText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text Sentiment Analysis Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Banner, {\n      averageSentiment: averagePositiveSentiment,\n      totalComments: totalComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextInputForm, {\n      onAnalysisComplete: handleAnalysisComplete,\n      onTextChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SentimentPieChart, {\n        sentimentData: sentimentData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WordCloud, {\n        words: wordCloudData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TopWords, {\n        wordData: wordCloudData.slice(0, 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CommentsTable, {\n        commentsData: commentsData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"zrQEL5zq8LfUPlSE5x9d/MEIL/g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextInputForm","Banner","SentimentPieChart","WordCloud","TopWords","CommentsTable","jsxDEV","_jsxDEV","getWordFrequency","text","words","toLowerCase","match","wordCount","reduce","acc","word","Object","keys","map","value","App","_s","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","rawText","setRawText","commentsData","setCommentsData","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","sentimentScore","a","b","chartData","validResults","filter","length","totalPositiveScore","extractedCommentsData","sentiment","handleTextChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","onAnalysisComplete","onTextChange","wordData","slice","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\n\nfunction getWordFrequency(text) {\n    const words = text\n        .toLowerCase()\n        .match(/\\w+/g);\n\n    if (!words) {\n        return [];\n    }\n\n    const wordCount = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n    }, {});\n\n    return Object.keys(wordCount).map(word => {\n        return { text: word, value: wordCount[word] };\n    });\n}\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n    const [rawText, setRawText] = useState(''); // State to store the raw text input\n    const [commentsData, setCommentsData] = useState([]);\n\n    const handleAnalysisComplete = (results) => {\n        let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n\n        results.forEach(result => {\n            if (result) {\n                const sentimentData = JSON.parse(result);\n                const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n                sentimentCounts[highestSentiment]++;\n            }\n        });\n\n        const chartData = [\n            sentimentCounts.Positive, \n            sentimentCounts.Negative, \n            sentimentCounts.Neutral,\n            sentimentCounts.Mixed\n        ];\n        setSentimentData(chartData);\n\n        const validResults = results.filter(result => result != null);\n        setTotalComments(validResults.length);\n  \n        const totalPositiveScore = validResults.reduce((acc, result) => {\n            const sentimentData = JSON.parse(result);\n            return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n        }, 0);\n\n        const extractedCommentsData = results.map(result => ({\n          text: JSON.parse(result).text,\n          sentiment: JSON.parse(result).sentiment\n        }));\n        setCommentsData(extractedCommentsData);\n\n        setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n        \n        setWordCloudData(getWordFrequency(rawText));\n    };\n\n    const handleTextChange = (text) => {\n        setRawText(text);\n    };\n\n    return (\n        <div className=\"App\">\n            <h1>Text Sentiment Analysis Dashboard</h1>\n            <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n            <TextInputForm onAnalysisComplete={handleAnalysisComplete} onTextChange={handleTextChange} />\n            <div className=\"dashboard-content\">\n                <SentimentPieChart sentimentData={sentimentData} />\n                <WordCloud words={wordCloudData} />\n                <TopWords wordData={wordCloudData.slice(0, 10)} /> \n                <CommentsTable commentsData={commentsData} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}