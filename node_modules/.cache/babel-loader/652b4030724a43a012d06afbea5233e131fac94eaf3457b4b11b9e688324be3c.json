{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/components/TextInputForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TextInputForm.css';\nimport { ReactComponent as UpArrowIcon } from './up-arrow-icon.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextInputForm = ({\n  onAnalysisComplete,\n  onTextChange\n}) => {\n  _s();\n  const [text, setText] = useState('');\n  const [isTextEntered, setIsTextEntered] = useState(false);\n  const predefinedComments = {\n    set1: [\"Absolutely love this product, it's amazing! - Positive\", \"Unfortunately, it didn't meet my expectations. - Negative\", \"The product is okay, nothing special. - Neutral\", \"Some features are great, others not so much. - Mixed\", \"Enjoyed the overall experience, but some aspects could be better. - Mixed\", \"Reliable and effective, gets the job done. - Positive\", \"Not as good as advertised, quite disappointed. - Negative\", \"Met my expectations, but nothing more. - Neutral\", \"Good value for money, but has some minor issues. - Mixed\", \"Fantastic service, always goes above and beyond! - Positive\", \"It's functional, but I expected more features. - Neutral\"],\n    set2: [\"This service is outstanding, exceeded my expectations! - Positive\", \"Not very satisfied with the customer service. - Negative\", \"The service is decent, but there's room for improvement. - Neutral\", \"Interesting concept but the execution is lacking. - Mixed\", \"Quite pleased with the outcome, though it has minor flaws. - Mixed\", \"Exemplary performance, truly a top-notch product. - Positive\", \"Falls short in terms of durability and reliability. - Negative\", \"Adequate for my needs, but not exceptional. - Neutral\", \"Has great potential but needs more development. - Mixed\", \"Incredible results, couldn’t be happier! - Positive\", \"Functional, yet lacks innovative features. - Neutral\"],\n    set3: [\"I'm really impressed with the quality! - Positive\", \"The product broke after a week, not happy. - Negative\", \"It's an average product, works as expected. - Neutral\", \"Love part of the service, but some parts are frustrating. - Mixed\", \"Satisfactory performance, though it has room for improvement. - Mixed\", \"Exceeds expectations in every way, highly recommended! - Positive\", \"Disappointing experience, will not be repurchasing. - Negative\", \"Average quality, nothing to write home about. - Neutral\", \"A mixed bag, some aspects good, others not. - Mixed\", \"Thrilled with the purchase, it’s been fantastic! - Positive\", \"Okay for everyday use, but lacks excitement. - Neutral\"],\n    set4: [\"Excellent performance, very reliable! - Positive\", \"The user experience could be a lot better. - Negative\", \"For the price, it's a decent choice. - Neutral\", \"Has its ups and downs, not consistent. - Mixed\", \"Impressive in some areas but falls short in others. - Mixed\", \"Absolutely phenomenal, exceeded all my expectations! - Positive\", \"Regrettably, it did not live up to the hype. - Negative\", \"Mediocre, I expected more based on the reviews. - Neutral\", \"Shows promise, but it's a bit of a mixed experience. - Mixed\", \"Superb in every aspect, a must-have! - Positive\", \"Works well, but nothing that stands out. - Neutral\"]\n  };\n  const handleTextChange = e => {\n    const newText = e.target.value;\n    setText(newText);\n    onTextChange(newText);\n    setIsTextEntered(newText.trim() !== '');\n  };\n  const handlePredefinedCommentClick = comment => {\n    setText(comment);\n    setIsTextEntered(true);\n    onTextChange(comment);\n  };\n  const callAPI = async inputText => {\n    try {\n      const myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      const raw = JSON.stringify({\n        \"text\": inputText\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n      };\n      const response = await fetch(\"https://eip9ikhrl0.execute-api.us-east-2.amazonaws.com/dev\", requestOptions);\n      const result = await response.json();\n      return result.body;\n    } catch (error) {\n      console.error('error', error);\n      return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!isTextEntered) {\n      return;\n    }\n    const comments = text.split('\\n').filter(comment => comment.trim() !== '');\n    const results = await Promise.all(comments.map(comment => callAPI(comment)));\n    onAnalysisComplete(results);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-input-form\",\n    children: [!isTextEntered && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predefined-comments-container\",\n      children: Object.entries(predefinedComments).map(([set, comments], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-comment-set\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"predefined-comments-box\",\n          children: comments.split('\\n').map((comment, commentIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"predefined-comment-button\",\n            onClick: () => handlePredefinedCommentClick(comment),\n            children: comment\n          }, commentIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)\n      }, set, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"text-input\",\n        value: text,\n        onChange: handleTextChange,\n        placeholder: \"Enter your texts (one comment per line)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button ${isTextEntered ? '' : 'inactive'}`,\n        children: /*#__PURE__*/_jsxDEV(UpArrowIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n};\n_s(TextInputForm, \"VNj6Z7JLurCVCQFKrG4Ix2PkxTA=\");\n_c = TextInputForm;\nexport default TextInputForm;\nvar _c;\n$RefreshReg$(_c, \"TextInputForm\");","map":{"version":3,"names":["React","useState","ReactComponent","UpArrowIcon","jsxDEV","_jsxDEV","TextInputForm","onAnalysisComplete","onTextChange","_s","text","setText","isTextEntered","setIsTextEntered","predefinedComments","set1","set2","set3","set4","handleTextChange","e","newText","target","value","trim","handlePredefinedCommentClick","comment","callAPI","inputText","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","response","fetch","result","json","error","console","handleSubmit","event","preventDefault","comments","split","filter","results","Promise","all","map","className","children","Object","entries","set","index","commentIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/components/TextInputForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './TextInputForm.css';\nimport { ReactComponent as UpArrowIcon } from './up-arrow-icon.svg';\n\nconst TextInputForm = ({ onAnalysisComplete, onTextChange }) => {\n    const [text, setText] = useState('');\n    const [isTextEntered, setIsTextEntered] = useState(false);\n\n    const predefinedComments = {\n        set1: [\n            \"Absolutely love this product, it's amazing! - Positive\",\n            \"Unfortunately, it didn't meet my expectations. - Negative\",\n            \"The product is okay, nothing special. - Neutral\",\n            \"Some features are great, others not so much. - Mixed\",\n            \"Enjoyed the overall experience, but some aspects could be better. - Mixed\",\n            \"Reliable and effective, gets the job done. - Positive\",\n            \"Not as good as advertised, quite disappointed. - Negative\",\n            \"Met my expectations, but nothing more. - Neutral\",\n            \"Good value for money, but has some minor issues. - Mixed\",\n            \"Fantastic service, always goes above and beyond! - Positive\",\n            \"It's functional, but I expected more features. - Neutral\"\n        ],\n        set2: [\n            \"This service is outstanding, exceeded my expectations! - Positive\",\n            \"Not very satisfied with the customer service. - Negative\",\n            \"The service is decent, but there's room for improvement. - Neutral\",\n            \"Interesting concept but the execution is lacking. - Mixed\",\n            \"Quite pleased with the outcome, though it has minor flaws. - Mixed\",\n            \"Exemplary performance, truly a top-notch product. - Positive\",\n            \"Falls short in terms of durability and reliability. - Negative\",\n            \"Adequate for my needs, but not exceptional. - Neutral\",\n            \"Has great potential but needs more development. - Mixed\",\n            \"Incredible results, couldn’t be happier! - Positive\",\n            \"Functional, yet lacks innovative features. - Neutral\"\n        ],\n        set3: [\n            \"I'm really impressed with the quality! - Positive\",\n            \"The product broke after a week, not happy. - Negative\",\n            \"It's an average product, works as expected. - Neutral\",\n            \"Love part of the service, but some parts are frustrating. - Mixed\",\n            \"Satisfactory performance, though it has room for improvement. - Mixed\",\n            \"Exceeds expectations in every way, highly recommended! - Positive\",\n            \"Disappointing experience, will not be repurchasing. - Negative\",\n            \"Average quality, nothing to write home about. - Neutral\",\n            \"A mixed bag, some aspects good, others not. - Mixed\",\n            \"Thrilled with the purchase, it’s been fantastic! - Positive\",\n            \"Okay for everyday use, but lacks excitement. - Neutral\"\n        ],\n        set4: [\n            \"Excellent performance, very reliable! - Positive\",\n            \"The user experience could be a lot better. - Negative\",\n            \"For the price, it's a decent choice. - Neutral\",\n            \"Has its ups and downs, not consistent. - Mixed\",\n            \"Impressive in some areas but falls short in others. - Mixed\",\n            \"Absolutely phenomenal, exceeded all my expectations! - Positive\",\n            \"Regrettably, it did not live up to the hype. - Negative\",\n            \"Mediocre, I expected more based on the reviews. - Neutral\",\n            \"Shows promise, but it's a bit of a mixed experience. - Mixed\",\n            \"Superb in every aspect, a must-have! - Positive\",\n            \"Works well, but nothing that stands out. - Neutral\"\n        ]\n    };\n    \n    \n\n    const handleTextChange = (e) => {\n        const newText = e.target.value;\n        setText(newText);\n        onTextChange(newText);\n        setIsTextEntered(newText.trim() !== '');\n    };\n\n    const handlePredefinedCommentClick = (comment) => {\n        setText(comment);\n        setIsTextEntered(true);\n        onTextChange(comment);\n    };\n\n    const callAPI = async (inputText) => {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            const raw = JSON.stringify({ \"text\": inputText });\n            const requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n            };\n\n            const response = await fetch(\"https://eip9ikhrl0.execute-api.us-east-2.amazonaws.com/dev\", requestOptions);\n            const result = await response.json();\n            return result.body;\n        } catch (error) {\n            console.error('error', error);\n            return null;\n        }\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (!isTextEntered) {\n            return;\n        }\n        const comments = text.split('\\n').filter(comment => comment.trim() !== '');\n        const results = await Promise.all(comments.map(comment => callAPI(comment)));\n        onAnalysisComplete(results);\n    };\n\n    return (\n        <div className=\"text-input-form\">\n        {!isTextEntered && (\n            <div className=\"predefined-comments-container\">\n                {Object.entries(predefinedComments).map(([set, comments], index) => (\n                    <div key={set} className=\"predefined-comment-set\">\n                        <div className=\"predefined-comments-box\">\n                            {comments.split('\\n').map((comment, commentIndex) => (\n                                <button\n                                    key={commentIndex}\n                                    className=\"predefined-comment-button\"\n                                    onClick={() => handlePredefinedCommentClick(comment)}\n                                >\n                                    {comment}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )}\n            <form onSubmit={handleSubmit}>\n                <textarea \n                    className=\"text-input\" \n                    value={text} \n                    onChange={handleTextChange}\n                    placeholder=\"Enter your texts (one comment per line)\"\n                />\n                <button type=\"submit\" className={`submit-button ${isTextEntered ? '' : 'inactive'}`}>\n                    <UpArrowIcon />\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default TextInputForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}