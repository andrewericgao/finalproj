{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\n\n// List of common stopwords\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst stopwords = ['a', 'the', 'with', 'on', 'in', 'at', 'to', 'and', 'but', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'down', 'from', 'into', 'over', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now'];\nfunction getWordFrequency(text) {\n  // Expanding basic contractions for normalization\n  text = text.toLowerCase().replace(/n't/g, ' not').replace(/'re/g, ' are').replace(/'s/g, ' is').replace(/'m/g, ' am').replace(/'ll/g, ' will').replace(/'ve/g, ' have').replace(/'d/g, ' would');\n\n  // Improved tokenization: Words only, remove numbers and punctuation\n  let words = text.match(/\\b[a-zA-Z]{3,}\\b/g); // Match words with 3 or more letters\n  if (!words) return [];\n\n  // Remove stopwords\n  words = words.filter(word => !stopwords.includes(word));\n\n  // Count word frequencies\n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(wordCount).map(word => ({\n    text: word,\n    value: wordCount[word]\n  }));\n}\nfunction App() {\n  _s();\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const [wordCloudData, setWordCloudData] = useState([]);\n  const [rawText, setRawText] = useState('');\n  const [commentsData, setCommentsData] = useState([]);\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  const handleAnalysisComplete = results => {\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData);\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      const sentimentData = JSON.parse(result);\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n    setWordCloudData(getWordFrequency(rawText));\n    const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n    const extractedCommentsData = comments.map((comment, index) => ({\n      text: comment,\n      sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n    }));\n    setCommentsData(extractedCommentsData);\n    setHasSubmitted(true);\n  };\n  const handleTextChange = text => {\n    setRawText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: [!hasSubmitted && /*#__PURE__*/_jsxDEV(WelcomeMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }, this), hasSubmitted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Banner, {\n          averageSentiment: averagePositiveSentiment,\n          totalComments: totalComments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"charts-container\",\n          children: [/*#__PURE__*/_jsxDEV(SentimentPieChart, {\n            sentimentData: sentimentData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(WordCloud, {\n            words: wordCloudData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-container\",\n          children: [/*#__PURE__*/_jsxDEV(TopWords, {\n            wordData: wordCloudData.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(CommentsTable, {\n            commentsData: commentsData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(TextInputForm, {\n      onAnalysisComplete: handleAnalysisComplete,\n      onTextChange: handleTextChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"DdpIbZkjbJpiw10lXWXM6QhfYY0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WelcomeMessage","TextInputForm","Banner","SentimentPieChart","WordCloud","TopWords","CommentsTable","jsxDEV","_jsxDEV","Fragment","_Fragment","stopwords","getWordFrequency","text","toLowerCase","replace","words","match","filter","word","includes","wordCount","reduce","acc","Object","keys","map","value","App","_s","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","rawText","setRawText","commentsData","setCommentsData","hasSubmitted","setHasSubmitted","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","sentimentScore","a","b","chartData","validResults","length","totalPositiveScore","comments","split","comment","trim","extractedCommentsData","index","sentiment","handleTextChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","wordData","slice","onAnalysisComplete","onTextChange","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\n\n// List of common stopwords\nconst stopwords = ['a', 'the', 'with', 'on', 'in', 'at', 'to', 'and', 'but', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'down', 'from', 'into', 'over', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now'];\n\nfunction getWordFrequency(text) {\n  // Expanding basic contractions for normalization\n  text = text.toLowerCase()\n      .replace(/n't/g, ' not')\n      .replace(/'re/g, ' are')\n      .replace(/'s/g, ' is')\n      .replace(/'m/g, ' am')\n      .replace(/'ll/g, ' will')\n      .replace(/'ve/g, ' have')\n      .replace(/'d/g, ' would');\n\n  // Improved tokenization: Words only, remove numbers and punctuation\n  let words = text.match(/\\b[a-zA-Z]{3,}\\b/g); // Match words with 3 or more letters\n  if (!words) return [];\n\n  // Remove stopwords\n  words = words.filter(word => !stopwords.includes(word));\n\n  // Count word frequencies\n  const wordCount = words.reduce((acc, word) => {\n      acc[word] = (acc[word] || 0) + 1;\n      return acc;\n  }, {});\n\n  return Object.keys(wordCount).map(word => ({ text: word, value: wordCount[word] }));\n}\n\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n    const [rawText, setRawText] = useState('');\n    const [commentsData, setCommentsData] = useState([]);\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n\n    const handleAnalysisComplete = (results) => {\n        let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n        results.forEach(result => {\n            if (result) {\n                const sentimentData = JSON.parse(result);\n                const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n                sentimentCounts[highestSentiment]++;\n            }\n        });\n\n        const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n        setSentimentData(chartData);\n\n        const validResults = results.filter(result => result != null);\n        setTotalComments(validResults.length);\n\n        const totalPositiveScore = validResults.reduce((acc, result) => {\n            const sentimentData = JSON.parse(result);\n            return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n        }, 0);\n\n        setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n        setWordCloudData(getWordFrequency(rawText));\n\n        const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n        const extractedCommentsData = comments.map((comment, index) => ({\n            text: comment,\n            sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n        }));\n        setCommentsData(extractedCommentsData);\n        setHasSubmitted(true);\n    };\n\n    const handleTextChange = (text) => {\n        setRawText(text);\n    };\n\n    return (\n      <div className=\"App\">\n          <div className=\"content-area\">\n              {!hasSubmitted && <WelcomeMessage />}\n              {hasSubmitted && (\n                  <>\n                      <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n                      <div className=\"charts-container\">\n                          <SentimentPieChart sentimentData={sentimentData} />\n                          <WordCloud words={wordCloudData} />\n                      </div>\n                      <div className=\"analysis-container\">\n                          <TopWords wordData={wordCloudData.slice(0, 10)} />\n                          <CommentsTable commentsData={commentsData} />\n                      </div>\n                  </>\n              )}\n          </div>\n          <TextInputForm onAnalysisComplete={handleAnalysisComplete} onTextChange={handleTextChange} />\n      </div>\n  );\n  \n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,aAAa,MAAM,4BAA4B;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,SAAS,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC;AAEhb,SAASC,gBAAgBA,CAACC,IAAI,EAAE;EAC9B;EACAA,IAAI,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,CACpBC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CACvBA,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CACvBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CACxBA,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CACxBA,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC;;EAE7B;EACA,IAAIC,KAAK,GAAGH,IAAI,CAACI,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;EAC7C,IAAI,CAACD,KAAK,EAAE,OAAO,EAAE;;EAErB;EACAA,KAAK,GAAGA,KAAK,CAACE,MAAM,CAACC,IAAI,IAAI,CAACR,SAAS,CAACS,QAAQ,CAACD,IAAI,CAAC,CAAC;;EAEvD;EACA,MAAME,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEJ,IAAI,KAAK;IAC1CI,GAAG,CAACJ,IAAI,CAAC,GAAG,CAACI,GAAG,CAACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAChC,OAAOI,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;EAEN,OAAOC,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACK,GAAG,CAACP,IAAI,KAAK;IAAEN,IAAI,EAAEM,IAAI;IAAEQ,KAAK,EAAEN,SAAS,CAACF,IAAI;EAAE,CAAC,CAAC,CAAC;AACrF;AAGA,SAASS,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGhC,QAAQ,CAAC,CAAC,CAAC;EAC3E,MAAM,CAACiC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAChE,MAAM,CAACqC,aAAa,EAAEC,gBAAgB,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACuC,OAAO,EAAEC,UAAU,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACyC,YAAY,EAAEC,eAAe,CAAC,GAAG1C,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC2C,YAAY,EAAEC,eAAe,CAAC,GAAG5C,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAM6C,sBAAsB,GAAIC,OAAO,IAAK;IACxC,IAAIC,eAAe,GAAG;MAAEC,QAAQ,EAAE,CAAC;MAAEC,QAAQ,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IACxEL,OAAO,CAACM,OAAO,CAACC,MAAM,IAAI;MACtB,IAAIA,MAAM,EAAE;QACR,MAAMlB,aAAa,GAAGmB,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;QACxC,MAAMG,gBAAgB,GAAG/B,MAAM,CAACC,IAAI,CAACS,aAAa,CAACsB,cAAc,CAAC,CAAClC,MAAM,CAAC,CAACmC,CAAC,EAAEC,CAAC,KAAKxB,aAAa,CAACsB,cAAc,CAACC,CAAC,CAAC,GAAGvB,aAAa,CAACsB,cAAc,CAACE,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC,CAAC;QAC9JZ,eAAe,CAACS,gBAAgB,CAAC,EAAE;MACvC;IACJ,CAAC,CAAC;IAEF,MAAMI,SAAS,GAAG,CAACb,eAAe,CAACC,QAAQ,EAAED,eAAe,CAACE,QAAQ,EAAEF,eAAe,CAACG,OAAO,EAAEH,eAAe,CAACI,KAAK,CAAC;IACtHf,gBAAgB,CAACwB,SAAS,CAAC;IAE3B,MAAMC,YAAY,GAAGf,OAAO,CAAC3B,MAAM,CAACkC,MAAM,IAAIA,MAAM,IAAI,IAAI,CAAC;IAC7DnB,gBAAgB,CAAC2B,YAAY,CAACC,MAAM,CAAC;IAErC,MAAMC,kBAAkB,GAAGF,YAAY,CAACtC,MAAM,CAAC,CAACC,GAAG,EAAE6B,MAAM,KAAK;MAC5D,MAAMlB,aAAa,GAAGmB,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;MACxC,OAAO7B,GAAG,IAAIW,aAAa,CAACsB,cAAc,GAAGtB,aAAa,CAACsB,cAAc,CAACT,QAAQ,GAAG,CAAC,CAAC;IAC3F,CAAC,EAAE,CAAC,CAAC;IAELhB,2BAA2B,CAAC6B,YAAY,CAACC,MAAM,GAAG,CAAC,GAAGC,kBAAkB,GAAGF,YAAY,CAACC,MAAM,GAAG,CAAC,CAAC;IACnGxB,gBAAgB,CAACzB,gBAAgB,CAAC0B,OAAO,CAAC,CAAC;IAE3C,MAAMyB,QAAQ,GAAGzB,OAAO,CAAC0B,KAAK,CAAC,IAAI,CAAC,CAAC9C,MAAM,CAAC+C,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IAC7E,MAAMC,qBAAqB,GAAGJ,QAAQ,CAACrC,GAAG,CAAC,CAACuC,OAAO,EAAEG,KAAK,MAAM;MAC5DvD,IAAI,EAAEoD,OAAO;MACbI,SAAS,EAAExB,OAAO,CAACuB,KAAK,CAAC,GAAGf,IAAI,CAACC,KAAK,CAACT,OAAO,CAACuB,KAAK,CAAC,CAAC,CAACC,SAAS,GAAG;IACvE,CAAC,CAAC,CAAC;IACH5B,eAAe,CAAC0B,qBAAqB,CAAC;IACtCxB,eAAe,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAM2B,gBAAgB,GAAIzD,IAAI,IAAK;IAC/B0B,UAAU,CAAC1B,IAAI,CAAC;EACpB,CAAC;EAED,oBACEL,OAAA;IAAK+D,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBhE,OAAA;MAAK+D,SAAS,EAAC,cAAc;MAAAC,QAAA,GACxB,CAAC9B,YAAY,iBAAIlC,OAAA,CAACR,cAAc;QAAAyE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACnClC,YAAY,iBACTlC,OAAA,CAAAE,SAAA;QAAA8D,QAAA,gBACIhE,OAAA,CAACN,MAAM;UAAC2E,gBAAgB,EAAE/C,wBAAyB;UAACE,aAAa,EAAEA;QAAc;UAAAyC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACpFpE,OAAA;UAAK+D,SAAS,EAAC,kBAAkB;UAAAC,QAAA,gBAC7BhE,OAAA,CAACL,iBAAiB;YAAC+B,aAAa,EAAEA;UAAc;YAAAuC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACnDpE,OAAA,CAACJ,SAAS;YAACY,KAAK,EAAEoB;UAAc;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACNpE,OAAA;UAAK+D,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBAC/BhE,OAAA,CAACH,QAAQ;YAACyE,QAAQ,EAAE1C,aAAa,CAAC2C,KAAK,CAAC,CAAC,EAAE,EAAE;UAAE;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAClDpE,OAAA,CAACF,aAAa;YAACkC,YAAY,EAAEA;UAAa;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC;MAAA,eACR,CACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACNpE,OAAA,CAACP,aAAa;MAAC+E,kBAAkB,EAAEpC,sBAAuB;MAACqC,YAAY,EAAEX;IAAiB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5F,CAAC;AAGZ;AAAC/C,EAAA,CApEQD,GAAG;AAAAsD,EAAA,GAAHtD,GAAG;AAsEZ,eAAeA,GAAG;AAAC,IAAAsD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}