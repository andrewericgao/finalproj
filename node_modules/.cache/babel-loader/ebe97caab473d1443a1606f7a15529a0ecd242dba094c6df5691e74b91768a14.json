{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const wordCloudData = [{\n    text: 'happy',\n    value: 100\n  }, {\n    text: 'sad',\n    value: 50\n  }, {\n    text: 'exciting',\n    value: 75\n  }\n  // ... more words\n  ];\n\n  const handleAnalysisComplete = results => {\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData); // Update the sentiment data for the chart\n\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      // Parse the JSON string to get the actual object\n      const sentimentData = JSON.parse(result);\n      // Access the Positive score, ensuring that sentimentScore is defined\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text Sentiment Analysis Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Banner, {\n      averageSentiment: averagePositiveSentiment,\n      totalComments: totalComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(TextInputForm, {\n      onAnalysisComplete: handleAnalysisComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(SentimentPieChart, {\n      sentimentData: sentimentData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SentimentPieChart, {\n        sentimentData: sentimentData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WordCloud, {\n        words: wordCloudData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"bAYSPMvch4/nVgGLQQmbFHRHPJI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextInputForm","Banner","SentimentPieChart","WordCloud","jsxDEV","_jsxDEV","App","_s","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","text","value","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","Object","keys","sentimentScore","reduce","a","b","chartData","validResults","filter","length","totalPositiveScore","acc","className","children","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","onAnalysisComplete","words","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const wordCloudData = [\n      { text: 'happy', value: 100 },\n      { text: 'sad', value: 50 },\n      { text: 'exciting', value: 75 },\n      // ... more words\n  ];\n\n    const handleAnalysisComplete = (results) => {\n      let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n\n      results.forEach(result => {\n          if (result) {\n              const sentimentData = JSON.parse(result);\n              const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n              sentimentCounts[highestSentiment]++;\n          }\n      });\n\n      const chartData = [\n          sentimentCounts.Positive, \n          sentimentCounts.Negative, \n          sentimentCounts.Neutral,\n          sentimentCounts.Mixed\n      ];\n      setSentimentData(chartData); // Update the sentiment data for the chart\n\n      const validResults = results.filter(result => result != null);\n      setTotalComments(validResults.length);\n  \n      const totalPositiveScore = validResults.reduce((acc, result) => {\n          // Parse the JSON string to get the actual object\n          const sentimentData = JSON.parse(result);\n          // Access the Positive score, ensuring that sentimentScore is defined\n          return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n      }, 0);\n  \n      setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n  }\n\n    return (\n      <div className=\"App\">\n          <h1>Text Sentiment Analysis Dashboard</h1>\n          <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n          <TextInputForm onAnalysisComplete={handleAnalysisComplete} />\n         <SentimentPieChart sentimentData={sentimentData} />\n         <div className=\"dashboard-content\">\n                <SentimentPieChart sentimentData={sentimentData} />\n                <WordCloud words={wordCloudData} />\n          </div>\n      </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAC3E,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAChE,MAAMe,aAAa,GAAG,CACpB;IAAEC,IAAI,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC7B;IAAED,IAAI,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAG,CAAC,EAC1B;IAAED,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAG;EAC9B;EAAA,CACH;;EAEC,MAAMC,sBAAsB,GAAIC,OAAO,IAAK;IAC1C,IAAIC,eAAe,GAAG;MAAEC,QAAQ,EAAE,CAAC;MAAEC,QAAQ,EAAE,CAAC;MAAEC,OAAO,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAE,CAAC;IAExEL,OAAO,CAACM,OAAO,CAACC,MAAM,IAAI;MACtB,IAAIA,MAAM,EAAE;QACR,MAAMb,aAAa,GAAGc,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;QACxC,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,IAAI,CAAClB,aAAa,CAACmB,cAAc,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKtB,aAAa,CAACmB,cAAc,CAACE,CAAC,CAAC,GAAGrB,aAAa,CAACmB,cAAc,CAACG,CAAC,CAAC,GAAGD,CAAC,GAAGC,CAAC,CAAC;QAC9Jf,eAAe,CAACS,gBAAgB,CAAC,EAAE;MACvC;IACJ,CAAC,CAAC;IAEF,MAAMO,SAAS,GAAG,CACdhB,eAAe,CAACC,QAAQ,EACxBD,eAAe,CAACE,QAAQ,EACxBF,eAAe,CAACG,OAAO,EACvBH,eAAe,CAACI,KAAK,CACxB;IACDV,gBAAgB,CAACsB,SAAS,CAAC,CAAC,CAAC;;IAE7B,MAAMC,YAAY,GAAGlB,OAAO,CAACmB,MAAM,CAACZ,MAAM,IAAIA,MAAM,IAAI,IAAI,CAAC;IAC7Dd,gBAAgB,CAACyB,YAAY,CAACE,MAAM,CAAC;IAErC,MAAMC,kBAAkB,GAAGH,YAAY,CAACJ,MAAM,CAAC,CAACQ,GAAG,EAAEf,MAAM,KAAK;MAC5D;MACA,MAAMb,aAAa,GAAGc,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;MACxC;MACA,OAAOe,GAAG,IAAI5B,aAAa,CAACmB,cAAc,GAAGnB,aAAa,CAACmB,cAAc,CAACX,QAAQ,GAAG,CAAC,CAAC;IAC3F,CAAC,EAAE,CAAC,CAAC;IAELX,2BAA2B,CAAC2B,YAAY,CAACE,MAAM,GAAG,CAAC,GAAGC,kBAAkB,GAAGH,YAAY,CAACE,MAAM,GAAG,CAAC,CAAC;EACvG,CAAC;EAEC,oBACEjC,OAAA;IAAKoC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBrC,OAAA;MAAAqC,QAAA,EAAI;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1CzC,OAAA,CAACJ,MAAM;MAAC8C,gBAAgB,EAAEvC,wBAAyB;MAACE,aAAa,EAAEA;IAAc;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpFzC,OAAA,CAACL,aAAa;MAACgD,kBAAkB,EAAE/B;IAAuB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9DzC,OAAA,CAACH,iBAAiB;MAACU,aAAa,EAAEA;IAAc;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnDzC,OAAA;MAAKoC,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC3BrC,OAAA,CAACH,iBAAiB;QAACU,aAAa,EAAEA;MAAc;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnDzC,OAAA,CAACF,SAAS;QAAC8C,KAAK,EAAEnC;MAAc;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEZ;AAACvC,EAAA,CAvDQD,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAyDZ,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}