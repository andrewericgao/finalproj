{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst stopwords = ['a', 'about', 'all', 'am', 'an', 'and', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'both', 'but', 'by', 'can', 'did', 'do', 'does', 'down', 'each', 'few', 'for', 'from', 'had', 'has', 'have', 'he', 'her', 'here', 'him', 'his', 'how', 'i', 'if', 'in', 'into', 'is', 'it', 'its', 'just', 'more', 'most', 'my', 'no', 'not', 'now', 'of', 'on', 'one', 'only', 'or', 'other', 'our', 'out', 'over', 's', 'she', 'so', 'some', 'such', 't', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those', 'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', 'we', 'were', 'what', 'when', 'where', 'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'you', 'your'];\nfunction getWordFrequency(text) {\n  text = text.toLowerCase().replace(/n't/g, ' not').replace(/'re/g, ' are').replace(/'s/g, ' is').replace(/'m/g, ' am').replace(/'ll/g, ' will').replace(/'ve/g, ' have').replace(/'d/g, ' would').replace(/[\\r\\n]+/g, ' ').replace(/https?:\\/\\/\\S+/g, ' ').replace(/[\\w.]+@\\w+\\.\\w+/g, ' ');\n  let words = text.match(/\\b[a-zA-Z']{3,}\\b/g);\n  if (!words) return [];\n  words = words.filter(word => !stopwords.includes(word) && !word.includes(\"'\"));\n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.entries(wordCount).map(([text, value]) => ({\n    text,\n    value\n  })).sort((a, b) => b.value - a.value);\n}\nfunction App() {\n  _s();\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const [wordCloudData, setWordCloudData] = useState([]);\n  const [rawText, setRawText] = useState('');\n  const [commentsData, setCommentsData] = useState([]);\n  const [hasSubmitted, setHasSubmitted] = useState(false);\n  const [textInputHeight, setTextInputHeight] = useState(0);\n  const textInputRef = useRef(null);\n  useEffect(() => {\n    if (textInputRef.current) {\n      setTextInputHeight(textInputRef.current.clientHeight);\n    }\n  }, [hasSubmitted]);\n  const handleAnalysisComplete = results => {\n    console.log(\"Sentiment Analysis Results:\", results);\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData);\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      const sentimentData = JSON.parse(result);\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n    setWordCloudData(getWordFrequency(rawText));\n    const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n    const extractedCommentsData = comments.map((comment, index) => ({\n      text: comment,\n      sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n    }));\n    setCommentsData(extractedCommentsData);\n    setHasSubmitted(true);\n  };\n  const handleTextChange = text => {\n    setRawText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      style: {\n        paddingBottom: hasSubmitted ? `${textInputHeight}px` : '0'\n      },\n      children: [!hasSubmitted && /*#__PURE__*/_jsxDEV(WelcomeMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 35\n      }, this), hasSubmitted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Banner, {\n          averageSentiment: averagePositiveSentiment,\n          totalComments: totalComments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"charts-container\",\n          children: [/*#__PURE__*/_jsxDEV(SentimentPieChart, {\n            sentimentData: sentimentData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(WordCloud, {\n            words: wordCloudData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"analysis-container\",\n          children: [/*#__PURE__*/_jsxDEV(TopWords, {\n            wordData: wordCloudData.slice(0, 10)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(CommentsTable, {\n            commentsData: commentsData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: textInputRef,\n      children: /*#__PURE__*/_jsxDEV(TextInputForm, {\n        onAnalysisComplete: handleAnalysisComplete,\n        onTextChange: handleTextChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"lTkOErP3Qfhc9UAzp7bwgspCXuc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","WelcomeMessage","TextInputForm","Banner","SentimentPieChart","WordCloud","TopWords","CommentsTable","jsxDEV","_jsxDEV","Fragment","_Fragment","stopwords","getWordFrequency","text","toLowerCase","replace","words","match","filter","word","includes","wordCount","reduce","acc","Object","entries","map","value","sort","a","b","App","_s","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","rawText","setRawText","commentsData","setCommentsData","hasSubmitted","setHasSubmitted","textInputHeight","setTextInputHeight","textInputRef","current","clientHeight","handleAnalysisComplete","results","console","log","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","keys","sentimentScore","chartData","validResults","length","totalPositiveScore","comments","split","comment","trim","extractedCommentsData","index","sentiment","handleTextChange","className","children","style","paddingBottom","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","wordData","slice","ref","onAnalysisComplete","onTextChange","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport WelcomeMessage from './components/WelcomeMessage';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport TopWords from './components/TopWords';\nimport CommentsTable from './components/CommentsTable';\n\nconst stopwords = [\n  'a', 'about', 'all', 'am', 'an', 'and', 'any', 'are', 'as', 'at', 'be', 'because', 'been', 'both', 'but', \n  'by', 'can', 'did', 'do', 'does', 'down', 'each', 'few', 'for', 'from', 'had', 'has', 'have', 'he', 'her', \n  'here', 'him', 'his', 'how', 'i', 'if', 'in', 'into', 'is', 'it', 'its', 'just', 'more', 'most', 'my', 'no', \n  'not', 'now', 'of', 'on', 'one', 'only', 'or', 'other', 'our', 'out', 'over', 's', 'she', 'so', 'some', \n  'such', 't', 'than', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'this', 'those', \n  'through', 'to', 'too', 'under', 'until', 'up', 'very', 'was', 'we', 'were', 'what', 'when', 'where', \n  'which', 'while', 'who', 'whom', 'why', 'will', 'with', 'would', 'you', 'your'\n];\n\nfunction getWordFrequency(text) {\n  text = text.toLowerCase()\n      .replace(/n't/g, ' not')\n      .replace(/'re/g, ' are')\n      .replace(/'s/g, ' is')\n      .replace(/'m/g, ' am')\n      .replace(/'ll/g, ' will')\n      .replace(/'ve/g, ' have')\n      .replace(/'d/g, ' would')\n      .replace(/[\\r\\n]+/g, ' ')\n      .replace(/https?:\\/\\/\\S+/g, ' ')\n      .replace(/[\\w.]+@\\w+\\.\\w+/g, ' ');\n\n  let words = text.match(/\\b[a-zA-Z']{3,}\\b/g);\n  if (!words) return [];\n\n  words = words.filter(word => !stopwords.includes(word) && !word.includes(\"'\"));\n\n  const wordCount = words.reduce((acc, word) => {\n      acc[word] = (acc[word] || 0) + 1;\n      return acc;\n  }, {});\n\n  return Object.entries(wordCount)\n      .map(([text, value]) => ({ text, value }))\n      .sort((a, b) => b.value - a.value);\n}\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n    const [rawText, setRawText] = useState('');\n    const [commentsData, setCommentsData] = useState([]);\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n\n    const [textInputHeight, setTextInputHeight] = useState(0);\n    const textInputRef = useRef(null);\n\n    useEffect(() => {\n        if (textInputRef.current) {\n            setTextInputHeight(textInputRef.current.clientHeight);\n        }\n    }, [hasSubmitted]); \n\n    const handleAnalysisComplete = (results) => {\n        console.log(\"Sentiment Analysis Results:\", results);\n\n        let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n        results.forEach(result => {\n            if (result) {\n                const sentimentData = JSON.parse(result);\n                const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n                sentimentCounts[highestSentiment]++;\n            }\n        });\n\n        const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n        setSentimentData(chartData);\n\n        const validResults = results.filter(result => result != null);\n        setTotalComments(validResults.length);\n\n        const totalPositiveScore = validResults.reduce((acc, result) => {\n            const sentimentData = JSON.parse(result);\n            return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n        }, 0);\n\n        setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n        setWordCloudData(getWordFrequency(rawText));\n\n        const comments = rawText.split('\\n').filter(comment => comment.trim() !== '');\n        const extractedCommentsData = comments.map((comment, index) => ({\n            text: comment,\n            sentiment: results[index] ? JSON.parse(results[index]).sentiment : 'N/A'\n        }));\n        setCommentsData(extractedCommentsData);\n        setHasSubmitted(true);\n    };\n\n    const handleTextChange = (text) => {\n        setRawText(text);\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"content-area\" style={{ paddingBottom: hasSubmitted ? `${textInputHeight}px` : '0' }}>\n                {!hasSubmitted && <WelcomeMessage />}\n                {hasSubmitted && (\n                    <>\n                        <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n                        <div className=\"charts-container\">\n                            <SentimentPieChart sentimentData={sentimentData} />\n                            <WordCloud words={wordCloudData} />\n                        </div>\n                        <div className=\"analysis-container\">\n                            <TopWords wordData={wordCloudData.slice(0, 10)} />\n                            <CommentsTable commentsData={commentsData} />\n                        </div>\n                        {/* <div className=\"bottom-spacer\"></div> */}\n                    </>\n                )}\n            </div>\n            <div ref={textInputRef}>\n                <TextInputForm onAnalysisComplete={handleAnalysisComplete} onTextChange={handleTextChange} />\n            </div>\n        </div>\n    );\n  \n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}