{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getWordFrequency(text) {\n  const words = text.toLowerCase() // Convert to lower case\n  .match(/\\w+/g); // Regex to match words\n\n  if (!words) {\n    return [];\n  }\n  const wordCount = words.reduce((acc, word) => {\n    acc[word] = (acc[word] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(wordCount).map(word => {\n    return {\n      text: word,\n      value: wordCount[word]\n    };\n  });\n}\nfunction App() {\n  _s();\n  const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n  const [totalComments, setTotalComments] = useState(0);\n  const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n  const [wordCloudData, setWordCloudData] = useState([]);\n  const handleAnalysisComplete = results => {\n    let sentimentCounts = {\n      Positive: 0,\n      Negative: 0,\n      Neutral: 0,\n      Mixed: 0\n    };\n    results.forEach(result => {\n      if (result) {\n        const sentimentData = JSON.parse(result);\n        const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n        sentimentCounts[highestSentiment]++;\n      }\n    });\n    const chartData = [sentimentCounts.Positive, sentimentCounts.Negative, sentimentCounts.Neutral, sentimentCounts.Mixed];\n    setSentimentData(chartData); // Update the sentiment data for the chart\n\n    const validResults = results.filter(result => result != null);\n    setTotalComments(validResults.length);\n    const totalPositiveScore = validResults.reduce((acc, result) => {\n      // Parse the JSON string to get the actual object\n      const sentimentData = JSON.parse(result);\n      // Access the Positive score, ensuring that sentimentScore is defined\n      return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n    }, 0);\n    setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n    const allText = results.map(result => JSON.parse(result).text).join(' ');\n    const wordCloudData = getWordFrequency(allText);\n    setWordCloudData(wordCloudData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text Sentiment Analysis Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Banner, {\n      averageSentiment: averagePositiveSentiment,\n      totalComments: totalComments\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(TextInputForm, {\n      onAnalysisComplete: handleAnalysisComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(SentimentPieChart, {\n        sentimentData: sentimentData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(WordCloud, {\n        words: wordCloudData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"+KWPDJwjrkPKfBzEeBP4isEGwDA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TextInputForm","Banner","SentimentPieChart","WordCloud","jsxDEV","_jsxDEV","getWordFrequency","text","words","toLowerCase","match","wordCount","reduce","acc","word","Object","keys","map","value","App","_s","averagePositiveSentiment","setAveragePositiveSentiment","totalComments","setTotalComments","sentimentData","setSentimentData","wordCloudData","setWordCloudData","handleAnalysisComplete","results","sentimentCounts","Positive","Negative","Neutral","Mixed","forEach","result","JSON","parse","highestSentiment","sentimentScore","a","b","chartData","validResults","filter","length","totalPositiveScore","allText","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","averageSentiment","onAnalysisComplete","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TextInputForm from './components/TextInputForm';\nimport Banner from './components/Banner';\nimport SentimentPieChart from './components/SentimentPieChart';\nimport WordCloud from './components/WordCloud';\n\nfunction getWordFrequency(text) {\n  const words = text\n      .toLowerCase() // Convert to lower case\n      .match(/\\w+/g); // Regex to match words\n\n  if (!words) {\n      return [];\n  }\n\n  const wordCount = words.reduce((acc, word) => {\n      acc[word] = (acc[word] || 0) + 1;\n      return acc;\n  }, {});\n\n  return Object.keys(wordCount).map(word => {\n      return { text: word, value: wordCount[word] };\n  });\n}\n\n\nfunction App() {\n    const [averagePositiveSentiment, setAveragePositiveSentiment] = useState(0);\n    const [totalComments, setTotalComments] = useState(0);\n    const [sentimentData, setSentimentData] = useState([0, 0, 0, 0]);\n    const [wordCloudData, setWordCloudData] = useState([]);\n\n    const handleAnalysisComplete = (results) => {\n      let sentimentCounts = { Positive: 0, Negative: 0, Neutral: 0, Mixed: 0 };\n\n      results.forEach(result => {\n          if (result) {\n              const sentimentData = JSON.parse(result);\n              const highestSentiment = Object.keys(sentimentData.sentimentScore).reduce((a, b) => sentimentData.sentimentScore[a] > sentimentData.sentimentScore[b] ? a : b);\n              sentimentCounts[highestSentiment]++;\n          }\n      });\n\n      const chartData = [\n          sentimentCounts.Positive, \n          sentimentCounts.Negative, \n          sentimentCounts.Neutral,\n          sentimentCounts.Mixed\n      ];\n      setSentimentData(chartData); // Update the sentiment data for the chart\n\n      const validResults = results.filter(result => result != null);\n      setTotalComments(validResults.length);\n  \n      const totalPositiveScore = validResults.reduce((acc, result) => {\n          // Parse the JSON string to get the actual object\n          const sentimentData = JSON.parse(result);\n          // Access the Positive score, ensuring that sentimentScore is defined\n          return acc + (sentimentData.sentimentScore ? sentimentData.sentimentScore.Positive : 0);\n      }, 0);\n  \n      setAveragePositiveSentiment(validResults.length > 0 ? totalPositiveScore / validResults.length : 0);\n\n      const allText = results.map(result => JSON.parse(result).text).join(' ');\n      const wordCloudData = getWordFrequency(allText);\n      setWordCloudData(wordCloudData); \n  }\n\n    return (\n      <div className=\"App\">\n          <h1>Text Sentiment Analysis Dashboard</h1>\n          <Banner averageSentiment={averagePositiveSentiment} totalComments={totalComments} />\n          <TextInputForm onAnalysisComplete={handleAnalysisComplete} />\n         {/* <SentimentPieChart sentimentData={sentimentData} /> */}\n         <div className=\"dashboard-content\">\n                <SentimentPieChart sentimentData={sentimentData} />\n                <WordCloud words={wordCloudData} />\n          </div>\n      </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}