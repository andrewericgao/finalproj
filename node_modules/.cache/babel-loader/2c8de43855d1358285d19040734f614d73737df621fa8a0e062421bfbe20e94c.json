{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Desktop/Northwestern/finalproj/src/components/TextInputForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TextInputForm.css';\nimport { ReactComponent as UpArrowIcon } from './up-arrow-icon.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextInputForm = ({\n  onAnalysisComplete,\n  onTextChange\n}) => {\n  _s();\n  const [text, setText] = useState('');\n  const [isTextEntered, setIsTextEntered] = useState(false);\n  const predefinedComments = {\n    instagramComments: \"Love the vibrant colors in this photo, really stands out!\\n\" + \"This post lacks originality and feels repetitive.\\n\" + \"A decent shot, but nothing extraordinary.\\n\" + \"Mixed feelings about this post, some parts I like, some not.\\n\" + \"Engaging content, but the caption could be better.\\n\" + \"Incredible creativity, your posts never disappoint!\\n\" + \"Not a fan of this style, seems a bit off.\\n\" + \"An okay post, but I've seen similar content elsewhere.\\n\" + \"Your storytelling in this post is fantastic!\\n\" + \"The photo is good, but the filter overpowers the natural beauty.\",\n    twitterComments: \"Impressed with the quick response to current events.\\n\" + \"This tweet is spreading misinformation, not cool.\\n\" + \"An average tweet, not much engagement.\\n\" + \"Interesting opinion, but some replies raise valid concerns.\\n\" + \"Love how you interact with your followers, very engaging.\\n\" + \"Tweet lacks context, feels incomplete.\\n\" + \"Solid tweet, informative and to the point.\\n\" + \"Mixed reactions here, some support, some disagree.\\n\" + \"Your humor in tweets is always a day brightener!\\n\" + \"The thread is good, but some comments are off-topic.\",\n    linkedinComments: \"Professional insight, very informative and helpful.\\n\" + \"Feels more like a sales pitch than genuine advice.\\n\" + \"Good article, but it covers well-known information.\\n\" + \"A mix of good advice and promotional content.\\n\" + \"Solid networking tips, definitely using these!\\n\" + \"The post lacks depth on the subject matter.\\n\" + \"Great insights on industry trends, very helpful.\\n\" + \"Some points are good, others not backed by data.\\n\" + \"Your leadership advice is always on point!\\n\" + \"Informative post, but the writing style is a bit dry.\",\n    wildcard: \"Great community engagement on this post, very interactive!\\n\" + \"Misleading post, doesn't align with real facts.\\n\" + \"A regular update, nothing groundbreaking.\\n\" + \"Some interesting points, but also some contradictions.\\n\" + \"Your posts always bring insightful discussions, well done!\\n\" + \"The post feels a bit promotional rather than informative.\\n\" + \"Good content, but it could use more visuals.\\n\" + \"Mixed feedback in the comments, a divisive topic.\\n\" + \"Appreciate the regular updates and transparency.\\n\" + \"This post could benefit from a clearer message.\"\n  };\n  const handleTextChange = e => {\n    const newText = e.target.value;\n    setText(newText);\n    onTextChange(newText);\n    setIsTextEntered(newText.trim() !== '');\n  };\n  const handlePredefinedCommentClick = comment => {\n    setText(comment);\n    setIsTextEntered(true);\n    onTextChange(comment);\n  };\n  const callAPI = async inputText => {\n    try {\n      const myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/json\");\n      const raw = JSON.stringify({\n        \"text\": inputText\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n      };\n      const response = await fetch(\"https://eip9ikhrl0.execute-api.us-east-2.amazonaws.com/dev\", requestOptions);\n      const result = await response.json();\n      return result.body;\n    } catch (error) {\n      console.error('error', error);\n      return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!isTextEntered) {\n      return;\n    }\n    const comments = text.split('\\n').filter(comment => comment.trim() !== '');\n    const results = await Promise.all(comments.map(comment => callAPI(comment)));\n    onAnalysisComplete(results);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-input-form\",\n    children: [!isTextEntered && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"predefined-comments-container\",\n      children: Object.entries(predefinedComments).map(([platform, comments], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"predefined-comment-set\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"predefined-set-button\",\n          onClick: () => handlePredefinedCommentClick(comments),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"platform-name\",\n            children: platform.replace(/([A-Z])/g, ' $1').trim()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"comment-preview\",\n            children: [\"\\\"\", comments.split('\\n')[0].slice(0, 30), \"...\\\"\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this)\n      }, platform, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"text-input\",\n        value: text,\n        onChange: handleTextChange,\n        placeholder: \"Enter your texts (one comment per line)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: `submit-button ${isTextEntered ? '' : 'inactive'}`,\n        children: /*#__PURE__*/_jsxDEV(UpArrowIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(TextInputForm, \"VNj6Z7JLurCVCQFKrG4Ix2PkxTA=\");\n_c = TextInputForm;\nexport default TextInputForm;\nvar _c;\n$RefreshReg$(_c, \"TextInputForm\");","map":{"version":3,"names":["React","useState","ReactComponent","UpArrowIcon","jsxDEV","_jsxDEV","TextInputForm","onAnalysisComplete","onTextChange","_s","text","setText","isTextEntered","setIsTextEntered","predefinedComments","instagramComments","twitterComments","linkedinComments","wildcard","handleTextChange","e","newText","target","value","trim","handlePredefinedCommentClick","comment","callAPI","inputText","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","response","fetch","result","json","error","console","handleSubmit","event","preventDefault","comments","split","filter","results","Promise","all","map","className","children","Object","entries","platform","index","onClick","replace","fileName","_jsxFileName","lineNumber","columnNumber","slice","onSubmit","onChange","placeholder","type","_c","$RefreshReg$"],"sources":["/Users/andrewgao/Desktop/Northwestern/finalproj/src/components/TextInputForm.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './TextInputForm.css';\nimport { ReactComponent as UpArrowIcon } from './up-arrow-icon.svg';\n\nconst TextInputForm = ({ onAnalysisComplete, onTextChange }) => {\n    const [text, setText] = useState('');\n    const [isTextEntered, setIsTextEntered] = useState(false);\n\n    const predefinedComments = {\n        instagramComments: \n        \"Love the vibrant colors in this photo, really stands out!\\n\" +\n        \"This post lacks originality and feels repetitive.\\n\" +\n        \"A decent shot, but nothing extraordinary.\\n\" +\n        \"Mixed feelings about this post, some parts I like, some not.\\n\" +\n        \"Engaging content, but the caption could be better.\\n\" +\n        \"Incredible creativity, your posts never disappoint!\\n\" +\n        \"Not a fan of this style, seems a bit off.\\n\" +\n        \"An okay post, but I've seen similar content elsewhere.\\n\" +\n        \"Your storytelling in this post is fantastic!\\n\" +\n        \"The photo is good, but the filter overpowers the natural beauty.\",\n        twitterComments: \n        \"Impressed with the quick response to current events.\\n\" +\n        \"This tweet is spreading misinformation, not cool.\\n\" +\n        \"An average tweet, not much engagement.\\n\" +\n        \"Interesting opinion, but some replies raise valid concerns.\\n\" +\n        \"Love how you interact with your followers, very engaging.\\n\" +\n        \"Tweet lacks context, feels incomplete.\\n\" +\n        \"Solid tweet, informative and to the point.\\n\" +\n        \"Mixed reactions here, some support, some disagree.\\n\" +\n        \"Your humor in tweets is always a day brightener!\\n\" +\n        \"The thread is good, but some comments are off-topic.\",\n        linkedinComments: \n        \"Professional insight, very informative and helpful.\\n\" +\n        \"Feels more like a sales pitch than genuine advice.\\n\" +\n        \"Good article, but it covers well-known information.\\n\" +\n        \"A mix of good advice and promotional content.\\n\" +\n        \"Solid networking tips, definitely using these!\\n\" +\n        \"The post lacks depth on the subject matter.\\n\" +\n        \"Great insights on industry trends, very helpful.\\n\" +\n        \"Some points are good, others not backed by data.\\n\" +\n        \"Your leadership advice is always on point!\\n\" +\n        \"Informative post, but the writing style is a bit dry.\",\n        wildcard: \n        \"Great community engagement on this post, very interactive!\\n\" +\n        \"Misleading post, doesn't align with real facts.\\n\" +\n        \"A regular update, nothing groundbreaking.\\n\" +\n        \"Some interesting points, but also some contradictions.\\n\" +\n        \"Your posts always bring insightful discussions, well done!\\n\" +\n        \"The post feels a bit promotional rather than informative.\\n\" +\n        \"Good content, but it could use more visuals.\\n\" +\n        \"Mixed feedback in the comments, a divisive topic.\\n\" +\n        \"Appreciate the regular updates and transparency.\\n\" +\n        \"This post could benefit from a clearer message.\",\n        };\n\n    const handleTextChange = (e) => {\n        const newText = e.target.value;\n        setText(newText);\n        onTextChange(newText);\n        setIsTextEntered(newText.trim() !== '');\n    };\n\n    const handlePredefinedCommentClick = (comment) => {\n        setText(comment);\n        setIsTextEntered(true);\n        onTextChange(comment);\n    };\n\n    const callAPI = async (inputText) => {\n        try {\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/json\");\n\n            const raw = JSON.stringify({ \"text\": inputText });\n            const requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: raw,\n                redirect: 'follow'\n            };\n\n            const response = await fetch(\"https://eip9ikhrl0.execute-api.us-east-2.amazonaws.com/dev\", requestOptions);\n            const result = await response.json();\n            return result.body;\n        } catch (error) {\n            console.error('error', error);\n            return null;\n        }\n    }\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        if (!isTextEntered) {\n            return;\n        }\n        const comments = text.split('\\n').filter(comment => comment.trim() !== '');\n        const results = await Promise.all(comments.map(comment => callAPI(comment)));\n        onAnalysisComplete(results);\n    };\n\n    return (\n        <div className=\"text-input-form\">\n        {!isTextEntered && (\n            <div className=\"predefined-comments-container\">\n                {Object.entries(predefinedComments).map(([platform, comments], index) => (\n                    <div key={platform} className=\"predefined-comment-set\">\n                        <button\n                            className=\"predefined-set-button\"\n                            onClick={() => handlePredefinedCommentClick(comments)}\n                        >\n                            <span className=\"platform-name\">{platform.replace(/([A-Z])/g, ' $1').trim()}</span>\n                            <span className=\"comment-preview\">\"{comments.split('\\n')[0].slice(0, 30)}...\"</span>\n                        </button>\n                    </div>\n                ))}\n            </div>\n        )}\n            <form onSubmit={handleSubmit}>\n                <textarea \n                    className=\"text-input\" \n                    value={text} \n                    onChange={handleTextChange}\n                    placeholder=\"Enter your texts (one comment per line)\"\n                />\n                <button type=\"submit\" className={`submit-button ${isTextEntered ? '' : 'inactive'}`}>\n                    <UpArrowIcon />\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default TextInputForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}